In Schema Complications Table
t.index ["medication_id"], name: "index_complications_on_medication_id"
t.index ["user_id"], name: "index_complications_on_user_id"

add_index :complications :medication_id
add_index :complications :user_id

 









-------------------------------------------------------------
class Medication {
    static all = []
     
    constructor({name_strength, frequency, administration_route, id}){
        this.name_strength = name_strength
        this.frequency = frequency
        this.administration_route = administration_route
        this.id = id
        Medication.all.push(this)
    }

    static getAll() {

        return this.all
    }

    static findById(id) {
        return this.all.find(medication => medication.id === id)
    }

    static findOrCreateBy(medicationObj) {
        return this.findById(medicationObj.id) || new Medication(medicationObj)
    }

    render() {
        ul().innerHTML += "<h1 id='medications-header'>Medications</h1>"
        this.all.forEach(med => this.renderMedication(med))
    }

    static renderMedicationsInDropdown = (medications) => {
        let select, refresh
        if (document.querySelector("#medication-dropdown")) {
            refresh = true
            select = document.querySelector("#medication-dropdown")
            select.innerHTML = ""
        } else {
            refresh = false
            select = document.createElement("select")
            select.id = "medication-dropdown"
        }
        const option = document.createElement("option")
        option.innerText = "Press To Choose A Medication"
            select.add(option)
        medications.forEach(medication => {
            const option = document.createElement("option")
            option.value = medication.id
            option.innerText = `${medication.name_strength}`
            select.add(option)
        })
        if (!refresh) {
            if (localStorage.getItem('user_id') !== null) {
                const newMedicationButton = document.createElement("button")
                newMedicationButton.id = "new-medication-button" 
                newMedicationButton.innerText = "Create a New Medication"
                ul().appendChild(newMedicationButton)
                const br = document.createElement("br")
                ul().appendChild(br)
                newMedicationButton.addEventListener('click', this.displayForm)
        }
   }
         ul().appendChild(select)
         
         select.addEventListener("change", this.handleMedicationDropdownChange)
}

   renderMedications = (medications) => {
    ul().innerHTML += "<h1 id='medications-header'>Medications</h1>"
    renderMedicationsInDropdown(medications.data)
}
   static handleMedicationDropdownChange = (e) => {
    if (document.querySelector(".medication-container")) {
    document.querySelector(".medication-container").remove()
}
    const medId = e.target.value
    const div = document.createElement("div")
    div.classList.add("medication-container")
    div.id = `medication-${medId}`
    ul().appendChild(div)
    if (localStorage.getItem("user_id") != null) {
        const newComplicationButton = document.createElement("button")
        newComplicationButton.innerText = "Add A Complication"
        newComplicationButton.dataset.medId = medId
        newComplicationButton.id = 'new-complication-button'
        div.appendChild(newComplicationButton)
        newComplicationButton.addEventListener("click", Complication.displayForm)
    }
    actions/medActions.js    fetchMeds(medId)
   }
 
   static displayForm = () => {
    if (!medicationForm()) {
        ul().insertAdjacentHTML('afterend', `
        <form id="medication-form">
            
            <h3>Add New Medication:</h3>
            <label for="medication-nameStrength">Medication's Name-strength: </label>
            <input type="text" name="medication-nameStrength" id="medication-nameStrength"><br><br>
            <label for="medication-frequency">Medication Frequency: </label>
            <input type="text" name="medication-frequency" id="medication-frequency"><br><br>
            <label for="medication-administrationRoute">Medication Administration Route: </label>
            <input type="text" name="medication-administrationRoute" id="Medication-administrationRoute"><br><br>
            <input type="submit" value="Create">
        </form>
        `)
        document.getElementById("medication-form").addEventListener("submit", Medication.handleSubmit)
         
    } else {
        medicationForm().remove()
    }
}

-----------------------------------------------------------------------
class Complications {
    static all = []
    
    constructor({complication_severity, complication_duration, complication_description,  completely_resolved, medication_id, user_id, id }){
        this.complication_severity = complication_severity
        this.complication_duration = complication_duration
        this.complication_description = complication_description
        this.completely_resolved = completely_resolved
        this.medication_id = medication_id
        this.user_id = user_id
        this.id = id
        Complication.all.push(this)
    }
     
    static getAll() {
        return this.all
    }

    static findById(id) {
        return this.all.find(complication => complication.id === id)
    }

    static findOrCreateBy(complicationObj) {
        return this.findById(complicationObj.id) || new Complication(complicationObj)
    }

    renderComplications(comp) {
        return comp
    }
 
    static displayForm = (e) => {
        e.preventDefault()
        if (!newComplicationsForm()) {
            list.insertAdjacentHTML('afterend', `
            <form id="new-complications-form">
                <h3>Add New Complications:</h3>
                <input type="hidden" id="complications-medicationId" name="medicationId" value="${e.target.dataset.medId}"/>
                <label for="complications-complicationSeverity">Complication Severity (1-10):</label>
                <input type="number" name="complicationSeverity" id="complications-complicationSeverity"><br><br>
                <label for="complications-complicationDuration"> How Long The Complication Lasted:</label>
                <input type="text" name="complicationDuration" id="complications-complicationDuration"><br><br>
                <label for="complications-complicationDescription">Details Of The Complication:</label>
                <input type="text" name="complicationDescription" id="complications-complicationDescription"><br><br>
                <label for="complications-completelyResolved">Is The Complication Completely Resolved?:</label>
                <input type="boolean" name="completelyResolved" id="complications-completelyResolved"><br><br>
                <input type="submit" value="Create">
            </form>
            `)
    
            document.getElementById("new-complications-form").addEventListener("submit", TO BE ADDED.handleSubmit)
        } else {
            newComplicationsForm().remove()
        }
    }

    renderComplications = (e, complication) => {
        TO BE ADDED.fetchReviews(medication.id, renderComplication)
    }

t.integer "complication_severity"
    t.string "complication_duration"
    t.text "complication_description"
    t.boolean "completely_resolved"
    renderComplication = () => {
        if (document.querySelector(`#complication-li-${this.id}`)){
            return
        }
        const div = document.getElementById(`medication-${this.medication_id}`)
        const li = document.createElement("li")
        li.id = `complication-li-${this.id}`
        div.dataset.docId = this.medication_id
        div.dataset.id = this.id
        li.innerHTML = `
           ---------------------
            <label for="complications-complicationDuration"> How Long The Complication Lasted:</label>
                <input type="text" name="complicationDuration" id="complications-complicationDuration"><br><br>
                ----------------------
            <br>Complication Severity (1-10): <strong class="complications-complicationSeverity">${this.complication_severity}</strong><br>
            Doctor Comments: <span class="reviews-doctorComments">${this.doctor_comments}</span><br>
            Doctor's Office Rating (1-10): <span class="reviews-doctorOfficeRating">${this.doctor_office_rating}</span><br>
            Doctor's Office Comments (1-10): <span class="reviews-doctorOfficeComments">${this.doctor_office_comments}</span><br>
        `
        if(localStorage.getItem("user_id") == this.user_id) {
            li.innerHTML += `<button class="edit-review" data-id="${this.id}">Edit</button>
            <button class="delete-review" data-id="${this.id}">Delete</button><br>`
        }
    li.innerHTML += '<hr>'
        div.appendChild(li)
        if(localStorage.getItem("user_id") == this.user_id) {
            document.querySelector(`button.delete-review[data-id='${this.id}']`).addEventListener("click", ReviewApi.handleDelete)
           document.querySelector(`button.edit-review[data-id='${this.id}']`).addEventListener("click", this.handleUpdate)
        }
        
    }
    
    
    handleCreateReview = (renderReviews) => {
        ul().children.length < 1 ? handleClick() : renderReview(review, review.doctor.id)
        reviewForm().reset()
    }

    handleUpdate = (e) => {
        if (e.target.innerText === "Edit") {
            const revId = e.target.dataset.id
            const doctorRating = e.target.parentElement.querySelector(".reviews-doctorRating").innerText
            const doctorComments = e.target.parentElement.querySelector(".reviews-doctorComments").innerText
            const doctorOfficeRating = e.target.parentElement.querySelector(".reviews-doctorOfficeRating").innerText
            const doctorOfficeComments = e.target.parentElement.querySelector(".reviews-doctorOfficeComments").innerText
             
            e.target.parentElement.innerHTML = `
                <label for="reviews-doctorRating">Doctor Rating (1-10):</label>
                <input type="number" name="doctorRating" id="reviews-doctorRating" value="${doctorRating}"><br>
                <label for="reviews-doctorComments">Comments Regarding This Doctor:</label>
                <input type="text" name="doctorComments" id="reviews-doctorComments" value="${doctorComments}"><br>
                <label for="reviews-doctorOfficeRating">Doctor's Office Rating (1-10):</label>
                <input type="number" name="doctorOfficeRating" id="reviews-doctorOfficeRating" value="${doctorOfficeRating}"><br>
                <label for="reviews-doctorOfficeComments">Comments Regarding This Doctor's Office:</label>
                <input type="text" name="doctorOfficeComment" id="reviews-doctorOfficeComments" value="${doctorOfficeComments}"><br>
                <button class="update-review" data-id="${revId}">Update</button>
                <button class="delete-review" data-id="${revId}">Delete</button>
           `
                document.querySelector(`button.delete-review[data-id='${revId}']`).addEventListener("click", ReviewApi.handleDelete)
                document.querySelector(`button.update-review[data-id='${revId}']`).addEventListener("click", this.handleUpdate)
           
    
    
        } else {
            ReviewApi.handleFetchUpdate(e)
        }
    }
    
    
    replaceElement = (li) => {
         
        li.innerHTML = `
        Doctor Rating (1-10): <strong class="reviews-doctorRating">${this.doctor_rating}</strong><br>
        Doctor Comments: <span class="reviews-doctorComments">${this.doctor_comments}</span><br>
        Doctor's Office Rating (1-10): <span class="reviews-doctorOfficeRating">${this.doctor_office_rating}</span><br>
        Doctor's Office Comments (1-10): <span class="reviews-doctorOfficeComments">${this.doctor_office_comments}</span><br>
            <button class="edit-review" data-id="${this.id}">Edit</button>
            <button class="delete-review" data-id="${this.id}">Delete</button>
        `
           document.querySelector(`button.delete-review[data-id='${this.id}']`).addEventListener("click", ReviewApi.handleDelete)
           document.querySelector(`button.edit-review[data-id='${this.id}']`).addEventListener("click", this.handleUpdate)
        
    }
}
    